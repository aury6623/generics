To: J3                                                     J3/##-###
From: Tom Clune & generics subgroup
Subject: Formal syntax for generic programming features
Date: 10-10-2022

Reference: 22-151r3, 22-154r5, 22-161r1, 22-162r3

1. Introduction


This paper contains the syntax for generic programming features.


2. Formal Syntax
================

2.1 Syntax for the TEMPLATE construct
-------------------------------------

<template> <<is>>  <template-stmt>
                      [ <template-specification-part> ]
                      [ <template-subprogram-part> ]
                   <end-template-stmt>

<template-stmt> <<is>> TEMPLATE <template-name> ([<template-arg-list>])

<end-template-stmt> <<is>>  END [TEMPLATE [<template-name>]]

Constraint: If the <end-template-stmt> includes <template-name> the
            <template-stmt> shall specify the same <template-name>.

<template-arg> <<is>> <template-arg-name>



<template-specification-part> <<is>>
            [ use-stmt ] ...
            [IMPLICIT NONE [(<implicit-none-spec-list>)]]
            [ <template-declaration-construct> ] ...

Constraint: If EXTERNAL is specified in <implicit-none-spec-list>,
            then TYPE shall also be specified.

<template-subprogram-part> <<is>> <contains-stmt>
                                     [ <template-subprogram> ] ...

<template-subprogram> <<is>> <function-subprogram>
                      <<or>> <subroutine-subprogram>

<template-declaration-construct> <<is>> <template-specification-construct>
                                 <<or>> <requires-stmt>
                                 <<or>> <requirement-construct>

Constraint: If a variable appears in a
            <template-declaration-construct>, it shall be explicitly
            typed.

<template-const-declaration-stmt> <<is>>
           <declaration-type-spec>, <template-attr-constant-spec> ::
           <template-const-list>

<template-const> <<is>> <template-const-name>

Constraint: The type of entities declared shall be INTEGER, LOGICAL,
            or assumed-length character.

Constraint: Each <template-arg> shall be one of <template-const>,
            <template-type>, or be specified in on of 
            <template-proc-declaration-stmt>, <interface-block>
            or <requires-stmt>.

Constraint: Each <template-const> shall appear in a
            <template-const-declaration-stmt>.


<template-attr-constant-spec> <<is>> [<template-attr-spec>,]...
                                     CONSTANT
                                     [,<template-attr-spec>]...

<template-attr-spec> <<is>> CONTIGUOUS
                     <<or>> DIMENSION ( <array-spec> )

<template-type-declaration-stmt> <<is>>  TYPE, DEFERRED :: <template-type-list>

<template-type> <<is>> <type-name>

Constraint: Each <template-type> shall appear in <template-arg-list>.

<template-proc-declaration-stmt> <<is>> PROCEDURE[(<interface>)] ::
              <template-proc-decl-list>

<template-proc-decl> <<is>> <procedure-entity-name>

<template-specification-construct> 
                      <<is>> <derived-type-def>
                      <<or>> <enum-def>
                      <<or>> <enumeration-type-def>
                      <<or>> <generic-stmt>
                      <<or>> <interface-block>
                      <<or>> <parameter-stmt>
                      <<or>> <procedure-declaration-stmt>
                      <<or>> <template-other-specification-stmt>
                      <<or>> <type-declaration-stmt>
                      <<or>> <template>
                      <<or>> <template-arg-declaration-stmt>
                      <<or>> <instantiate-stmt>

<template-arg-declaration-stmt> <<is>> <template-const-declaration-stmt>
                                <<or>> <template-type-declaration-stmt>
                                <<or>> <template-proc-declaration-stmt>

<template-other-specification-stmt> <<is>> <access-stmt>
                                    <<or>> <allocatable-stmt>
                                    <<or>> <asynchronous-stmt>
                                    <<or>> <bind-stmt>
                                    <<or>> <codimension-stmt>
                                    <<or>> <contiguous-stmt>
                                    <<or>> <dimension-stmt>
                                    <<or>> <external-stmt>
                                    <<or>> <intrinsic-stmt>
                                    <<or>> <namelist-stmt>
                                    <<or>> <pointer-stmt>
                                    <<or>> <protected-stmt>
                                    <<or>> <save-stmt>
                                    <<or>> <target-stmt>
                                    <<or>> <volatile-stmt>


Additional constraints and other requirements

Constraint: <template> shall not contain any reference to any
            non-intrinsic procedure or non-intrinsic operator that
            does not have an explicit interface.


2.2 syntax for the INSTANTIATE stateement
-----------------------------------------

<instantiate-stmt>
     <<is>> INSTANTIATE [::] <template-name> (
               [ <actual-template-arg-spec-list> ] ) [, <rename-list> ]
     <<or>> INSTANTIATE [::] <template-name> (
               [ <actual-template-arg-spec-list> ] , ONLY : [ <only-list> ]

<actual-template-arg-spec-list> <<is>> [ keyword = ] <actual-template-arg>

<actual-template-arg> <<is>> <const-expr>
                      <<or>> <type-spec>
                      <<or>> <generic-spec>
                      <<or>> <procedure-name>
                      
Constraint: <const-expr> must be type INTEGER, LOGICAL or CHARACTER.

Constraint: If an <actual-template-arg> is a <derived-type-spec>, its
            <type-name> shall support intrinsic assignment.


2.3 Syntax for the REQUIREMENT construct
----------------------------------------

<requirement-def> <<is>> REQUIREMENT <requirement-name> ([<dummy-arg-list>])
                             <requirement-specification-part> ...
                         END [REQUIREMENT [<requirement-name>]]

<requirement-specification-part> <<is>> [<deferred-type-decl>]
                                 <<or>> [<interface-block>]

2.4 Syntax for the REQUIRES statement
-------------------------------------


<requires-stmt> <<is>> REQUIRES <requirement-name>([<template-arg-list>])

Constraint:  <requirement-name> must be previously defined.


===END===

