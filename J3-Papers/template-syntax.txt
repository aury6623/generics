Reference: 22-151r3, 22-154r5, 22-161r1, 22-162r3

1. Introduction
===============

This paper contains the syntax for generic programming features.
Section 2 contains examples, while section 3 provides the formal
syntax.  Section 4 contains straw votes for alternatives.


UTI's

1. Should INTERFACE inherit IMPLICIT NONE and host association in
   <template-interface-block>.
   Difficult change - deferred until structure is more complete.

Further -- need new defs of function and subroutine subprogram that
exclude ...

2. Examples
===========

MODULE A

   REQUIREMENT R(T,F)
      TYPE, DEFERRED :: T
      FUNCTION F(x) RESULT(y)
         TYPE(T) :: y
         TYPE(T), INTENT(IN) :: x
      END FUNCTION
   END REQUIREMENT
   
   TEMPLATE B(T,F,C)
      REQUIRES R(T,F)            ! provides interface for F
      TYPE, DEFERRED :: T        ! redundant
      INTEGER, CONSTANT :: C(..) ! deferred rank
      TYPE(T) :: var
   END TEMPLATE B

END MODULE A

MODULE B
  USE MODULE A

  TYPE :: MY_TYPE
     REAL :: val
  END TYPE
 
  INSTANTIATE B(MY_TYPE, SQUARE, [3,4]), ONLY: my_var => var

CONTAINS
   FUNCTION SQUARE(x) RESULT(y)
      TYPE(MY_TYPE) :: y
      TYPE(MY_TYPE), INTENT(IN) :: x
      y%val = x%val ** 2
   END FUNCTION

   SUBROUTINE DO_SOMETHING()
      my_var%val = my_var%val + 1.
   END SUBROUTINE
END MODULE B


3. Formal Syntax
================

3.1 Syntax for the TEMPLATE construct
-------------------------------------

<template> <<is>> <template-stmt>
                      [ <template-specification-part> ]
                      [ <template-subprogram-part> ]
                      <end-template-stmt>

<template-stmt> <<is>> TEMPLATE <template-name> ([<template-arg-list>])

<end-template-stmt> <<is>>  END [TEMPLATE [<template-name>]]

Constraint: If the <end-template-stmt> includes <template-name> the
            <template-stmt> shall specify the same <template-name>.

<template-arg> <<is>> <template-arg-name>

Constraint: Each <template-arg> shall be one of <template-const>,
            <template-type>, or be specified in one of
            <procedure-declaration-stmt>, <interface-block> or
            <requires-stmt>, within <template-specification-part>.

Note: If a <procedure-declaration-stmt> appears in the
      <template-specification-part> it can only be used to define a
      <template-arg>.


Constraint: A <template-arg> declaration shall not have an
            <access-spec> nor shall it appear in a PUBLIC statement.

Note: Template dummy arguments are local identifiers and are not
      externally accessible.


<template-specification-part> <<is>>
            [ use-stmt ] ...
            [ <template-declaration-construct> ] ...

Constraint: The implicit mapping within <template> is as if IMPLICIT
            NONE(TYPE,EXTERNAL) is in place.

<template-declaration-construct> <<is>> <template-specification-construct>
                                 <<or>> <requires-stmt>
                                 <<or>> <requirement-construct>

<template-specification-construct> 
                      <<is>> <access-stmt>
                      <<or>> <derived-type-def>
                      <<or>> <dimension-stmt>
                      <<or>> <enum-def>
                      <<or>> <enumeration-type-def>
                      <<or>> <generic-stmt>
                      <<or>> <instantiate-stmt>
                      <<or>> <intrinsic-stmt>
                      <<or>> <parameter-stmt>
                      <<or>> <procedure-declaration-stmt>
                      <<or>> <template>
                      <<or>> <template-const-declaration-stmt>
                      <<or>> <template-interface-block>
                      <<or>> <template-type-declaration-stmt>
                      <<or>> <type-declaration-stmt>

Note: The analogous construct for MODULE is divided into two separate
      constructs: <specific-construct> and
      <other-specification-construct>.  However, subgroup does not see
      the criteria by which items were assigned to either construct.
      Further since TEMPLATE admits fewer items, we have decided to
      merge these two constructs.

Constraint: In <type-declaration-stmt>, <entity> must have the
            PARAMETER attribute.

Note: This is to say, no template global variables are permitted.




<template-interface-block> <<is>> <interface-stmt>
                                     [ <template-interface-specification> ] ...
                                     <end-interface-stmt>

<template-interface-specification> <<is>> <interface-body>
                                   <<or>> <template-procedure-stmt>

<template-procedure-stmt> <<is>> PROCEDURE [ :: ] <specific-procedure-list>

Constraint: A <template-procedure-stmt> is allowed only in an
            interface block that has a <generic-spec>.

Constraint: In a <template-interface-block> the MODULE keyword shall
            not appear.

NOTE: Subgroup finds that using "MODULE PROCEDURE" for procedures
      defined in a template to be confusing and unnecessarily verbose.  Thus,
      in this context, interfaces should only have "PROCEDURE".




<template-const-declaration-stmt> <<is>>
           <declaration-type-spec>, <template-attr-constant-spec> ::
           <template-const-list>

Constraint: An entity declared in <template-const-declaration-stmt>
            shall be INTEGER, LOGICAL, or assumed-length character.

<template-const> <<is>> <template-const-name>

Constraint: Each <template-const> shall appear in a
            <template-const-declaration-stmt>.

<template-attr-constant-spec> <<is>> [<template-attr-spec>,]...
                                     CONSTANT
                                     [,<template-attr-spec>]...

<template-attr-spec> <<is>> CONTIGUOUS
                     <<or>> <dimension-spec>
                     <<or>> <rank-clause>



<template-type-declaration-stmt>
       <<is>>  TYPE, DEFERRED :: <template-type-list>

<template-type> <<is>> <type-name>

Constraint: Each <template-type> shall appear in <template-arg-list>.



<template-proc-declaration-stmt> <<is>>
     PROCEDURE[(<interface>)] :: <template-proc-decl-list>

<template-proc-decl> <<is>> <procedure-entity-name>


3.1.1 Additional constraints and other requirements:

Constraint: <template> shall not contain any reference to any
            non-intrinsic procedure or non-intrinsic operator that
            does not have an explicit interface.

Note: This constraint expresses the notion of "strong constraints".
      In particular, this allows a template implementation to be
      verified to be internally consistent.


**** THE NEW BOTTOM OF THIS SECTION ***

<template-subprogram-part> <<is>> <contains-stmt>
                                     [ <template-subprogram> ] ...

<template-subprogram> <<is>> <function-subprogram>
                      <<or>> <subroutine-subprogram>

3.2 syntax for the INSTANTIATE statement
----------------------------------------

<instantiate-stmt>
     <<is>> INSTANTIATE [::] <template-name> (
               [ <actual-template-arg-spec-list> ] ) [, <rename-list> ]
     <<or>> INSTANTIATE [::] <template-name> (
               [ <actual-template-arg-spec-list> ] , ONLY : [ <only-list> ]

<actual-template-arg-spec-list> <<is>> [ keyword = ] <actual-template-arg>

<actual-template-arg> <<is>> <const-expr>
                      <<or>> <type-spec>
                      <<or>> <generic-spec>
                      <<or>> <procedure-name>
                      
Constraint: <const-expr> must be type INTEGER, LOGICAL or CHARACTER.

Constraint: If an <actual-template-arg> is a <derived-type-spec>, its
            <type-name> shall support intrinsic assignment.


3.3 Syntax for the REQUIREMENT construct
----------------------------------------

<requirement-def>
      <<is>> REQUIREMENT <requirement-name> ([<template-arg-list>])
                <requirement-specification-part> ...
             END [REQUIREMENT [<requirement-name>]]

<requirement-specification-part> <<is>> <template-const-declaration-stmt>
                                 <<or>> <deferred-type-decl>
                                 <<or>> <requirement-interface-body>

<requirement-interface-body>
      <<is>> <function-stmt>
                [ <requirement-interface-specification-part> ]
             <end-function-stmt>
      <<or>> <subroutine-stmt>
                [ <requirement-interface-specification-part> ]
             <end-subroutine-stmt>

<requirement-interface-specification-part>
          <<is>> [ <use-stmt> ] ...
                 [ <requirement-interface-declaration-stmt> ] ...

<requirement-interface-specification-stmt>
          <<is>> <parameter-stmt>
          <<or>> <procedure-declaration-stmt>
          <<or>> <template-other-specification-stmt>
          <<or>> <requirement-interface-type-declaration-stmt>

<requirement-interface-type-declaration-stmt>
          <<is>> <declaration-type-spec>
                 [ [ , <requirement-interface-attr-spec> ] ... :: ]
                 <entity-decl-list>

<requirement-interface-attr-spec>
        <<is>> ALLOCATABLE
        <<or>> ASYNCHRONOUS
        <<or>> CODIMENSION <lbracket> <coarray-spec> <rbracket>
        <<or>> CONTIGUOUS
        <<or>> DIMENSION ( <array-spec> )
        <<or>> INTENT ( <intent-spec> )
        <<or>> OPTIONAL
        <<or>> PARAMETER
        <<or>> POINTER
        <<or>> <rank-clause>
        <<or>> TARGET
        <<or>> VALUE
        <<or>> VOLATILE

Constraint: <namelist-stmt>, <protected-stmt>, and <save-stmt> shall
            not appear within
            <requirement-interface-specification-construct>.


3.4 Syntax for the REQUIRES statement
-------------------------------------


<requires-stmt> <<is>>
`      REQUIRES <requirement-name>([<actual-template-arg-spec-list>])

Constraint: <requirement-name> must be previously defined.


4. Straw votes
----------------------
Straw vote 1: Template variables introduce the possibility of
              surprising side-effects when multiple instantiations
              with identical arg lists access/modify such entities.

              Allow template variables:  YES-NO-UNDECIDED

Straw vote 2: Subgroup foresees that the list of permitted attributes
              in the specification section of a template diverges from
              that of module specification section.

              Option 1: Introduce separate BNF for attributes and
                        other specification statements at the risk of
                        missing new attributes introduced in
                        subsequent revisions.

              Option 2: Add constraints such that such attributes are
                        disallowed at the risk of accidentally
                        permitting new attributes introduced in
                        subsquent revisions.

              Vote: Should we introduce separate/new BNF for template
                    statements: YES-NO-UNDECIDED


Straw vote 3: Should we introduce syntax for declaring a procedure in
              a template?  I.e., in a template should:

              INTERFACE SUB
                 MODULE PROCEDURE sub_1
              END INTERFACE

              instead be written as
                 
              INTERFACE SUB
                 TEMPLATE PROCEDURE sub_1
              END INTERFACE

                            

===END===

