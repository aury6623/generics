To: J3                                                     J3/##-###
From: generics
Subject: Edits for TEMPLATES: Introduction
Date:

UTI:

A standalone template procedure is a template whose instantiation
defines a single procedure.

The TEMPLATE construct is used to define templates.

A TEMPLATE construct may be defined in the specification section of a
main program, a module, a submodule, or a TEMPLATE construct.

UTI: Allow template definitions in submodule?
UTI: Allow template definitions in module procedures?
UTI: Allow template definitions in external procedures?
UTI: Allow template definitions in internal procedures?
UTI: Allow template definitions in a standalone template procedure?
UTI: Add constraint to <access-stmt> that a <deferred-arg> shall not appear?

* Introduce new clause after clause 19: Scope, association, and
  definition


## Templates

##.1 Template semantics

A template is a scoping unit which is parameterized by deferred
arguments and can contain declarations, specifications, and
definitions.  Instantiation of a template occurs via association of
instantiation arguments with deferred arguments and yields concrete
(i.e., non-parameterized) instances of entities defined with the
template.

##.2 Deferred arguments

##.2.1 Declarations of deferred arguments

##.2.1.1 General

A deferred argument is an entity whose characteristics are determined
by its effective instantiation argument.  A deferred argument can be a
constant, procedure, or type and can appear in a REQUIREMENT
construct, TEMPLATE construct, or standalone template procedure.
Association with instantiation arguments occurs in the REQUIRES and
INSTANTIATE statements.

<deferred-arg> <<is>> <deferred-const-name>
               <<or>> <deferred-proc>
               <<or>> <deferred-type>

Constraint: A <deferred-arg> shall appear in a <deferred-arg-decl-stmt>
            or as the <function-name> or <subroutine-name> of an
            <interface-body>.

Constraint: A <deferred-arg> shall have at most one explicit
            specification in a given scoping unit.

Note: Deferred arguments are local identifiers and are not externally
      accessible.

A deferred argument declaration statement is used to declare
deferred arguments.

<deferred-arg-decl-stmt> <<is>> <deferred-arg-explicit-stmt>
                         <<or>> <requires-stmt>

<deferred-arg-explicit-stmt> <<is>> <deferred-type-declaration-stmt>
                             <<or>> <deferred-const-declaration-stmt>
                             <<or>> <deferred-proc-declaration-stmt>

Constraint: A <deferred-arg-explicit-stmt> shall not have an
            <access-spec>.

##.2.1.2 Deferred types

A deferred type is a deferred argument that can appear in a type
specifier within a REQUIREMENT construct, TEMPLATE construct, or
standalone template procedure.

<deferred-type-declaration-stmt> <<is>>
         TYPE, <deferred-type-attr-list> :: <deferred-type-name-list>

Constraint: Each <deferred-type-name> shall appear in <deferred-arg-list>
            of the TEMPLATE, REQUIREMENT or standalone template
            procedure in which it appears.

<deferred-type-attr> <<is>> DEFERRED
                     <<or>> ABSTRACT
                     <<or>> EXTENSIBLE

Constraint: DEFERRED shall appear in each <deferred-type-attr-list>.

Constraint: The same <deferred-type-attr> shall not appear more than
            once in a given <deferred-type-attr-list>.

Constraint: A <deferred-type> entity shall not appear as
            <parent-type-name> in an EXTENDS attribute.

Note: A deferred type is not a <type-name>.  Consequently it shall not
      appear as a <derived-type-spec>, and so a deferred type
      may not be used in a <structure-constructor>.

A deferred type with the EXTENSIBLE attribute is an extensible derived
type. A deferred type with the ABSTRACT attribute is an abstract derived
type. A deferred type with the ABSTRACT attribute implicitly has the
EXTENSIBLE attribute, which can be confirmed with an explicit inclusion
of the EXTENSIBLE keyword in the <deferred-type-attr-list>.

Note: Examples of deferred type declarations are:

    TYPE, DEFERRED :: T1
    TYPE, EXTENSIBLE, DEFERRED :: T2
    TYPE, ABSTRACT, DEFERRED :: T3

Note: The distinction between deferred types that are extensible or not,
      and deferred types which are abstract or not, helps to ensure a
      processor can verify a template is internally consistent.  For
      example, a deferred type must not be permitted in a CLASS
      declaration if it might be instantiated as INTEGER. Additionally,
      a deferred type must not be permitted in a TYPE declaration if it
      might be instantiated with an abstract derived type. The following
      examples illustrate this point:

      SUBROUTINE S1_bad(T)(X, Y)
         TYPE, DEFERRED :: T
         TYPE(T)  :: X ! ok
         CLASS(T) :: Y ! invalid
      END SUBROUTINE

      SUBROUTINE S1(T)(X, Y)
         TYPE, DEFERRED :: T
         TYPE(T)  :: X ! ok
         TYPE(T)  :: Y ! ok
      END SUBROUTINE

      SUBROUTINE S2(T)(X, Y)
         TYPE, DEFERRED, EXTENSIBLE :: T
         TYPE(T)  :: X ! ok
         CLASS(T) :: Y ! ok
      END SUBROUTINE

      SUBROUTINE S3_bad(T)(X, Y)
         TYPE, DEFERRED, ABSTRACT :: T
         TYPE(T)  :: X ! invalid
         CLASS(T) :: Y ! ok
      END SUBROUTINE

      SUBROUTINE S3(T)(X, Y)
         TYPE, DEFERRED, ABSTRACT :: T
         CLASS(T) :: X ! ok
         CLASS(T) :: Y ! ok
      END SUBROUTINE

##.2.1.3 Deferred constants

A deferred constant is a deferred argument that can appear in constant
expressions within a REQUIREMENT construct, TEMPLATE construct, or
standalone template procedure.

<deferred-const-declaration-stmt> <<is>>
           <declaration-type-spec>, <deferred-const-attr-spec-list> ::
           <deferred-const-entity-decl-list>

<deferred-const-attr-spec> <<is>> <dimension-spec>
                           <<or>> DEFERRED
                           <<or>> PARAMETER
                           <<or>> <rank-clause>

Constraint: A <deferred-const-attr-spec-list> shall include both
            the DEFERRED and PARAMETER keywords.

Constraint: An entity declared in <deferred-const-declaration-stmt>
            shall be INTEGER, LOGICAL, or assumed-length CHARACTER.

<deferred-const-entity-decl>
     <<is>> <deferred-const-name> [ ( <array-spec> ) ]

Constraint: Each <deferred-const-name> shall appear in
            <deferred-arg-list> of the TEMPLATE, REQUIREMENT or
            standalone template procedure in which it appears.

Constraint: If <array-spec> appears in
            <deferred-const-declaration-stmt>, it shall be
            <implied-shape-spec>, <assumed-or-implied-rank-spec>,
            <explicit-shape-spec-list>, or
            <explicit-shape-bounds-spec>.

Constraint: If <implied-shape-spec>, <explicit-shape-spec> or
            <explicit-shape-bounds-spec> appears in
            <deferred-const-declaration-stmt>, then <lower-bound>
            shall not be specified.

Constraint: If <explicit-shape-bounds-spec> appears in
            <deferred-const-declaration-stmt>, then
            <explicit-bounds-expr> shall not appear as a lower bound.

Note: Deferred constants will always have default lower bounds.

Note: Examples of deferred constant declarations are:

    ! explicit shape
    INTEGER, DEFERRED, PARAMETER  :: x1
    INTEGER, DEFERRED, PARAMETER :: x2(3)
    INTEGER, PARAMETER :: v1(2) = [5,15] ! not a deferred constant
    INTEGER, DEFERRED, PARAMETER  :: x3(v1)

    ! implied shape
    INTEGER, DEFERRED, PARAMETER :: x4(*)
    INTEGER, DEFERRED, PARAMETER :: x5(*,*)
    INTEGER, DEFERRED, PARAMETER, RANK(2) :: x6

    ! assumed-or-implied-rank-spec
    INTEGER, DEFERRED, PARAMETER :: x7(..)

##.2.1.4 Deferred procedures

A deferred procedure is a deferred argument that can appear in
procedure references within a REQUIREMENT construct, TEMPLATE
construct, or standalone template procedure.  A deferred procedure's
interface shall be established in that construct. The interface of a
deferred procedure is established by its appearance in a
<deferred-proc-declaration-stmt> or as the <subroutine-name> or
<function-name> of an <interface-body> that appears in a deferred
interface block.

<deferred-proc-declaration-stmt> <<is>>
     PROCEDURE(<interface>), DEFERRED :: <deferred-proc-name-list>

Constraint: Each <deferred-proc-name> shall appear in the
            <deferred-arg-list> of the TEMPLATE, REQUIREMENT or
            standalone template procedure in which it appears.

Constraint: Each <subroutine-name> or <function-name> of an
            <interface-body> that appears in a deferred interface
            block shall appear in the <deferred-arg-list> of the
            TEMPLATE, REQUIREMENT or standalone template procedure in
            which it appears.

Note: The interface of a deferred procedure may be defined in terms of
      other deferred arguments.

Note: The following example declares deferred procedures F, S, and G:

   TYPE, DEFERRED :: T
   DEFERRED INTERFACE
      FUNCTION F(X)
         TYPE(T), INTENT(IN) :: X
         TYPE(T) :: F
      END FUNCTION
      SUBROUTINE S(Y)
         TYPE(T), INTENT(INOUT) :: Y
      END SUBROUTINE
   END INTERFACE
   PROCEDURE(F_I), DEFERRED :: G

##.2.2 Consistency of deferred argument specifications

##.2.2.1 General

Within a construct with a <deferred-arg>, an explicit specification of
that <deferred-arg> is either <deferred-arg-explicit-stmt> or
<interface-body> in a deferred interface block.

A <deferred-arg> shall have one or more ultimate specifications.  The
ultimate specifications of a <deferred-arg> are:
    - an explicit specification, if present, and
    - its ultimate specifications as instantiation arguments in
      REQUIRES statements, if any.
The ultimate specifications of an instantiation argument in a REQUIRES
statement are the ultimate specifications of the corresponding
deferred argument in the referenced requirement construct.

Note: A deferred argument is always explicitly declared within the
      template itself or directly or indirectly via a referenced
      requirement.  A deferred argument has at least one ultimate
      specification.

Note: If a deferred argument has multiple ultimate specifications,
      they must be consistent.  Constraints on consistency are
      defined in section ???

UTI: What section should the note above reference?

##.2.2.2 Specification of deferred types

Constraint: If any ultimate specification of a deferred argument is a
            deferred type, then all ultimate specifications of that
            deferred argument shall be deferred type.

If any ultimate specification of a deferred type has the EXTENSIBLE
attribute, then the deferred type has the EXTENSIBLE attribute.

If all ultimate specifications of a deferred type have the ABSTRACT
attribute, or if the deferred type has an explicit specification
with the ABSTRACT attribute, then the deferred type has the ABSTRACT
attribute. Otherwise the deferred type does not have the ABSTRACT
attribute.

NOTE: A deferred type with the ABSTRACT attribute is considered an
      abstract derived type, so it can only be an instantiation argument
      when the corresponding deferred argument has the ABSTRACT
      attribute. Therefore, if a deferred type has an explicit
      specification with the ABSTRACT attribute, all of its ultimate
      specifications must have the ABSTRACT attribute.

   REQUIREMENT R_REGULAR(U)
      TYPE, DEFERRED :: U
   END REQUIREMENT

   REQUIREMENT R_EXTENSIBLE(U)
      TYPE, DEFERRED, EXTENSIBLE :: U
   END REQUIREMENT

   REQUIREMENT R_ABSTRACT(U)
      TYPE, DEFERRED, ABSTRACT :: U
   END REQUIREMENT

   TEMPLATE T1(T)
      REQUIRES R_REGULAR(T) ! valid, non-extensible
   END TEMPLATE

   TEMPLATE T2(T)
      REQUIRES R_EXTENSIBLE(T) ! valid, extensible
   END TEMPLATE

   TEMPLATE T3(T)
      REQUIRES R_ABSTRACT(T) ! valid, abstract
   END TEMPLATE

   TEMPLATE T4(T)
      TYPE, DEFERRED :: T
      REQUIRES R_REGULAR(T) ! valid, non-extensible
   END TEMPLATE

   TEMPLATE T5(T)
      TYPE, DEFERRED :: T
      REQUIRES R_EXTENSIBLE(T) ! invalid, explicit decl is not extensible
   END TEMPLATE

   TEMPLATE T6(T)
      TYPE, DEFERRED :: T
      REQUIRES R_ABSTRACT(T) ! invalid, explicit decl is not extensible
   END TEMPLATE

   TEMPLATE T7(T)
      TYPE, DEFERRED, EXTENSIBLE :: T
      REQUIRES R_REGULAR(T) ! valid, T is not abstract
   END TEMPLATE

   TEMPLATE T8(T)
      TYPE, DEFERRED, EXTENSIBLE :: T
      REQUIRES R_EXTENSIBLE(T) ! valid, decls match
   END TEMPLATE

   TEMPLATE T9(T)
      TYPE, DEFERRED, EXTENSIBLE :: T
      REQUIRES R_ABSTRACT(T) ! valid, T is just extensible
   END TEMPLATE

   TEMPLATE T10(T)
      TYPE, DEFERRED, ABSTRACT :: T
      REQUIRES R_REGULAR(T) ! invalid, T is abstract
   END TEMPLATE

   TEMPLATE T11(T)
      TYPE, DEFERRED, ABSTRACT :: T
      REQUIRES R_EXTENSIBLE(T) ! invalid, T is abstract
   END TEMPLATE

   TEMPLATE T12(T)
      TYPE, DEFERRED, ABSTRACT :: T
      REQUIRES R_ABSTRACT(T) ! valid, decls match
   END TEMPLATE

   TEMPLATE T13(T)
      REQUIRES R_REGULAR(T)
      REQUIRES R_EXTENSIBLE(T) ! valid, T is extensible
   END TEMPLATE

   TEMPLATE T14(T)
      REQUIRES R_REGULAR(T)
      REQUIRES R_ABSTRACT(T) ! valid, T is just extensible
   END TEMPLATE

   TEMPLATE T15(T)
      REQUIRES R_EXTENSIBLE(T)
      REQUIRES R_ABSTRACT(T) ! valid, T is just extensible
   END TEMPLATE

##.2.2.3 Specification of deferred constants

Constraint: If any ultimate specification of a deferred argument is a
            deferred constant, then all ultimate specifications of
            that deferred argument shall be deferred constant.

Constraint: All ultimate specifications of a deferred constant shall
            specify the same type and kind-type parameters.

Constraint: If any ultimate specification of a deferred constant is of
            a non-implied rank R, then an explicit specification of
            that deferred constant shall have rank R, and all other
            ultimate specifications of that deferred constant shall
            either have implied rank or have rank R.

Constraint: If any ultimate specification of a deferred constant has
            explicit shape S, then an explicit specification of that
            deferred constant shall have shape S, and all other
            ultimate specifications of that deferred constant shall
            have implied rank, implied shape, or shape S.

If any ultimate specification of a deferred constant has an explicit
shape S, then that deferred constant has shape S.  Otherwise, if any
ultimate specification of that deferred constant has implied shape,
then it has implied shape with the same rank.  Otherwise it has
implied rank.

##.2.2.4 Specification of deferred procedures

Constraint: If any ultimate specification of a deferred argument is a
            deferred procedure, then all ultimate specifications of
            that deferred argument shall be deferred procedure.

Constraint: A deferred procedure shall not be referenced with keyword
            arguments unless it has an explicit specification.

Note: Although dummy arguments always have names, they are processor-
      dependent for deferred procedures without an explicit
      specification. The constraint above ensures such names cannot
      be used.

Constraint: Except for PURE, SIMPLE, and ELEMENTAL attributes, the
            characteristics of all ultimate specifications of a
            deferred procedure shall be consistent.

Note: The characteristics of a procedure do not include the names
      of the dummy arguments, so they need not be the same.

Constraint: If any ultimate specification of a deferred procedure is
            SIMPLE, then an explicit specification of that deferred
            procedure shall be SIMPLE.

Constraint: If any ultimate specification of a deferred procedure is
            PURE, then an explicit specification of that deferred
            procedure shall be PURE or SIMPLE.

Constraint: If any ultimate specification of a deferred procedure is
            ELEMENTAL, then an explicit specification of that deferred
            procedure shall be ELEMENTAL.

If any ultimate specification of a deferred procedure is SIMPLE then
that deferred procedure is SIMPLE. Otherwise, if any ultimate
specification of that deferred procedure is PURE, then it is PURE.

If any ultimate specification of a deferred procedure is ELEMENTAL then
that deferred procedure is ELEMENTAL.

Only an explicit specification of a deferred procedure defines the names
of its dummy arguments.
