To: J3                                                     J3/##-###
From: generics
Subject: Edits for TEMPLATES: Consistency of deferred args
Date:
References: ###

* Append the following to the new clause introduced in paper ###.


##.3 The TEMPLATE construct

##.3.1 Syntax for the TEMPLATE construct

A TEMPLATE construct defines a template that may define multiple
entities which may be accessed through instantiation.  A TEMPLATE
construct may appear in the specification section of a program unit
other than a block data program unit.

<template> <<is>> <template-stmt>
                      [ <template-specification-part> ]
                      [ <template-subprogram-part> ]
                      <end-template-stmt>

<template-stmt> <<is>> TEMPLATE <template-name> ([<deferred-arg-list>])

<end-template-stmt> <<is>>  END [TEMPLATE [<template-name>]]

Constraint: If a <template-name> appears in the <end-template-stmt>,
            it shall be identical to the <template-name>
            specified in the <template-stmt>.

##.3.2 Template specification part

<template-specification-part> <<is>>
            [ <use-stmt> ] ...
	    [ <import-stmt> ] ...
            [ <template-declaration-construct> ] ...

The implicit mapping within <template> is as if
       IMPLICIT NONE(TYPE,EXTERNAL)
is specified.

<template-declaration-construct> <<is>> <template-specification-construct>
                                 <<or>> <deferred-arg-decl-stmt>
                                 <<or>> <requirement>
                                 <<or>> <template>

<template-specification-construct>
                      <<is>> <access-stmt>
                      <<or>> <derived-type-def>
                      <<or>> <dimension-stmt>
                      <<or>> <enum-def>
                      <<or>> <enumeration-type-def>
                      <<or>> <generic-stmt>
                      <<or>> <instantiate-stmt>
		      <<or>> <interface-block>
                      <<or>> <intrinsic-stmt>
                      <<or>> <parameter-stmt>
                      <<or>> <type-declaration-stmt>

Note: An ALLOCATABLE, ASYNCHRONOUS, BIND, CODIMENSION, COMMON,
      CONTIGUOUS, DATA, ENTRY, EQUIVALENCE, EXTERNAL, FORMAT, INTENT,
      NAMELIST, OPTIONAL, POINTER, PROTECTED, SAVE, TARGET, VOLATILE,
      VALUE, or statement function statement is not permitted in a
      template specification section.

Constraint: An entity declared by <type-declaration-stmt> shall have
            the PARAMETER attribute.

Note: This is to say, the template specification section cannot
      declare variables.


##.3.3 Template subprogram part

<template-subprogram-part> <<is>> <contains-stmt>
                                     [ <template-subprogram> ] ...

<template-subprogram> <<is>> <function-subprogram>
                      <<or>> <subroutine-subprogram>


##.4 Standalone template procedures

A standalone template procedure is a template that defines a single
procedure which is accessible via instantiation.


<standalone-template-function-subprogram> <<is>>
       <standalone-template-function-stmt>
         <standalone-template-subprogram-specification-part>
         [<execution-part>]
         [<internal-subprogram-part>]
         <end-function-stmt>

<standalone-template-subroutine-subprogram> <<is>>
       <standalone-template-subroutine-stmt>
         <standalone-template-subprogram-specification-part>
         [<execution-part>]
         [<internal-subprogram-part>]
         <end-subroutine-stmt>

<standalone-template-subprogram-specification-part> <<is>>
     [ <use-stmt> ] ...
     [ <import-stmt> ] ...
     [ <standalone-template-subprogram-declaration-construct> ] ...

<standalone-template-subprogram-declaration-construct> <<is>>
     <deferred-arg-decl-stmt>
     <<or>> <format-stmt>
     <<or>> <specification-construct>

<standalone-template-function-stmt> <<is>>
     [ <prefix> ] FUNCTION <template-name>
         ( <deferred-arg-list> ) ([<dummy-arg-list>])
	 [<suffix>]

<standalone-template-subroutine-stmt> <<is>>
     [ <prefix> ] SUBROUTINE <template-name>
         ( <deferred-arg-list> ) ([<dummy-arg-list>])
	 [<proc-language-binding-spec>]

Constraint: If a <function-name> appears in the <end-function-stmt>,
            it shall be identical to the <template-name>
            specified in the <standalone-template-function-stmt>.

Constraint: If a <subroutine-name> appears in the <end-subroutine-stmt>,
            it shall be identical to the <template-name>
            specified in the <standalone-template-subroutine-stmt>.

##.5 Restrictions on template definitions

Constraint: A variable or procedure pointer declared in either a
	    <template-subprogram-part> or a
	    <standalone-template-subprogram-declaration-construct> shall
	    not have the SAVE attribute.

Constraint: EQUIVALENCE and COMMON shall not appear in a
            <template-subprogram-part> or a
            <standalone-template-subprogram-declaration-construct>.


Constraint: <template>, <standalone-template-function-subprogram> and
       <standalone-template-subroutine-subprogram> shall only reference
       intrinsic procedures, procedures with explicit interfaces, and
       operators.

Note: This constraint expresses the notion of type-safety.  In
      particular, this allows a template implementation to be verified
      to be internally consistent.

===END===
